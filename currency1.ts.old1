import { base_curName, rates } from './rates';

export interface ICurrency {
    cur: string;
    amount: number;
}

export class Converter implements ICurrency {
    cur: string;
    amount: number;
    constructor(currency: string, result: number) {
        this.cur = currency;
        this.amount = result;
    };
    convert() {
        let useThis: number;

        for(let i = 0; i < rates.length; i++) {
            if(rates[i].curName === this.cur){
                useThis = rates[i].inBaseCur * this.amount;
                convertedAmount = useThis;
            }
        }
        if (useThis === undefined) {
            return "Sorry, not available";
        }
        return (
            this.amount + " " + this.cur + " gives you " +
            useThis + " in " + base_curName
        )
    };
}

// make available outside
let convertedAmount: number;

export function convertBack(a: ICurrency) {
    return (
        convertedAmount + " " + base_curName + " converts back to " + a.amount + " " + a.cur
    )
}

// //testing
// let ctest = new Converter("USD", 75);
// let ctestResult = ctest.convert();
// console.log(ctestResult);

const usdToEurConvert = new Converter(0.256);

usdToEurConvert.convertBack(45);
usdToEurConvert.convert(45);
